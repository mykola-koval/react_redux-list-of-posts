{"version":3,"sources":["helpers/api.ts","store/actions.ts","store/selectors.ts","components/PostList/PostList.tsx","components/UserSelector/UserSelector.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","fetchPosts","a","fetch","response","json","fetchUsers","getUserPosts","userId","getPostDetails","postId","getPostComments","addPostComment","name","email","body","method","headers","JSON","stringify","newComment","LOAD_POSTS","LOAD_USERS","LOAD_POST_DETAILS","LOAD_POST_COMMENTS","LoadPostsAction","payload","type","LoadPostCommentsAction","getPostsSelector","state","posts","getUsersSelector","users","getPostDetailsSelector","postDetails","getPostCommentsSelector","postComments","PostList","dispatch","useDispatch","useSelector","useEffect","loadPostsFromServer","postsFromServer","handlePostDetails","className","map","post","title","onClick","id","UserSelector","loadUsersFromServer","usersFromServer","loadUserPosts","userPosts","loadAllPosts","handleUserChange","htmlFor","onChange","event","target","value","user","NewCommentForm","useState","setName","setEmail","setBody","addNewComment","preventDefault","placeholder","PostDetails","commentsHidden","setCommentsHidden","length","comment","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37fb39bf.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function fetchPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function fetchUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n\nexport async function getUserPosts(userId: number) {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n}\n\nexport async function getPostDetails(postId: number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport async function getPostComments(postId: number) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport const removePostComment = async (commentId: number) => {\n  const postComment = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return postComment.json();\n};\n\nexport const addPostComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  const newComment = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return newComment.json();\n};\n","export const LOAD_POSTS = 'LOAD_POSTS';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const LOAD_POST_DETAILS = 'LOAD_POST_DETAILS';\nexport const LOAD_POST_COMMENTS = 'LOAD_POST_COMMENTS';\n\nexport const LoadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const LoadUsersAction = (payload: User[]) => ({\n  type: LOAD_USERS,\n  payload,\n});\n\nexport const LoadPostDetailsAction = (payload: Post) => ({\n  type: LOAD_POST_DETAILS,\n  payload,\n});\n\nexport const LoadPostCommentsAction = (payload: PostComment[]) => ({\n  type: LOAD_POST_COMMENTS,\n  payload,\n});\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getUsersSelector = (state: State) => state.users;\nexport const getPostDetailsSelector = (state: State) => state.postDetails;\nexport const getPostCommentsSelector = (state: State) => state.postComments;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts, getPostComments, getPostDetails } from '../../helpers/api';\nimport { LoadPostCommentsAction, LoadPostDetailsAction, LoadPostsAction } from '../../store/actions';\nimport { getPostsSelector } from '../../store/selectors';\nimport './PostList.scss';\n\nexport const PostList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const posts: Post[] = useSelector(getPostsSelector);\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await fetchPosts();\n\n      dispatch(LoadPostsAction(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, []);\n\n  const handlePostDetails = async (postId: number) => {\n    const postDetails = await getPostDetails(postId);\n    const postComments = await getPostComments(postId);\n\n    dispatch(LoadPostDetailsAction(postDetails));\n    dispatch(LoadPostCommentsAction(postComments));\n  };\n\n  return (\n    <section className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handlePostDetails(post.id)}\n            >\n              open\n              {/* {post.id === selectedPostId ? 'Close' : 'Open'} */}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts, fetchUsers, getUserPosts } from '../../helpers/api';\nimport { LoadPostsAction, LoadUsersAction } from '../../store/actions';\nimport { getUsersSelector } from '../../store/selectors';\n\nexport const UserSelector: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const users: User[] = useSelector(getUsersSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await fetchUsers();\n\n      dispatch(LoadUsersAction(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  const loadUserPosts = async (userId: number) => {\n    const userPosts = await getUserPosts(userId);\n\n    dispatch(LoadPostsAction(userPosts));\n  };\n\n  const loadAllPosts = async () => {\n    const postsFromServer = await fetchPosts();\n\n    dispatch(LoadPostsAction(postsFromServer));\n  };\n\n  const handleUserChange = async (userId: number) => {\n    if (userId === 0) {\n      loadAllPosts();\n    } else {\n      loadUserPosts(userId);\n    }\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label htmlFor=\"user-selector\">\n        Select a user: &nbsp;\n\n        <select\n          id=\"user-selector\"\n          className=\"App__user-selector\"\n          onChange={(event) => handleUserChange(+event.target.value)}\n        >\n          <option value=\"0\">All users</option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addPostComment, getPostComments } from '../../helpers/api';\nimport { LoadPostCommentsAction } from '../../store/actions';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const dispatch = useDispatch();\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const addNewComment = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n\n    await addPostComment(postId, name, email, body);\n\n    const postComments = await getPostComments(postId);\n\n    dispatch(LoadPostCommentsAction(postComments));\n\n    clearForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={event => addNewComment(event)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getPostCommentsSelector, getPostDetailsSelector } from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [commentsHidden, setCommentsHidden] = useState(true);\n\n  const postDetails: Post | null = useSelector(getPostDetailsSelector);\n  const postComments: PostComment[] = useSelector(getPostCommentsSelector);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {postDetails\n        && (\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.body}</p>\n          </section>\n        )}\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setCommentsHidden(!commentsHidden)}\n        >\n          {`${commentsHidden ? 'Show' : 'Hide'} ${postComments.length} comments`}\n        </button>\n\n        {!commentsHidden\n          && (\n            <ul className=\"PostDetails__list\">\n              {postComments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                  // onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{`User [${comment.name}] says: ${comment.body}`}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {postDetails && !commentsHidden && <NewCommentForm postId={postDetails.id} />}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport { PostList } from './components/PostList';\nimport './styles/general.scss';\nimport './App.scss';\nimport { UserSelector } from './components/UserSelector';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <UserSelector />\n          <PostList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport {\n  LOAD_POSTS,\n  LOAD_POST_COMMENTS,\n  LOAD_POST_DETAILS,\n  LOAD_USERS,\n} from './actions';\n\nconst initialState: State = {\n  posts: [],\n  users: [],\n  postDetails: null,\n  postComments: [],\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    case LOAD_USERS:\n      return {\n        ...state,\n        users: [...action.payload],\n      };\n\n    case LOAD_POST_DETAILS:\n      return {\n        ...state,\n        postDetails: { ...action.payload },\n      };\n\n    case LOAD_POST_COMMENTS:\n      return {\n        ...state,\n        postComments: [...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}