{"version":3,"sources":["helpers/api.ts","store/actions.ts","store/selectors.ts","components/PostList/PostList.tsx","components/UserSelector/UserSelector.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","fetchPosts","a","fetch","response","json","fetchUsers","getUserPosts","userId","getPostDetails","postId","getPostComments","removePostComment","commentId","method","postComment","addPostComment","name","email","body","headers","JSON","stringify","newComment","LOAD_POSTS","LOAD_USERS","LOAD_POST_DETAILS","LOAD_POST_COMMENTS","LoadPostsAction","payload","type","LoadPostDetailsAction","LoadPostCommentsAction","getPostsSelector","state","posts","getUsersSelector","users","getPostDetailsSelector","postDetails","getPostCommentsSelector","postComments","PostList","useState","selectedPostId","setSelectedPostId","dispatch","useDispatch","useSelector","useEffect","loadPostsFromServer","postsFromServer","handlePostDetails","className","map","post","title","onClick","id","UserSelector","loadUsersFromServer","usersFromServer","loadUserPosts","userPosts","loadAllPosts","handleUserChange","htmlFor","onChange","event","target","value","user","NewCommentForm","setName","setEmail","setBody","addNewComment","preventDefault","placeholder","required","PostDetails","commentsHidden","setCommentsHidden","removeComment","postCommentsFromServer","length","comment","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f498f36a.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function fetchPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function fetchUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n\nexport async function getUserPosts(userId: number) {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n}\n\nexport async function getPostDetails(postId: number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport async function getPostComments(postId: number) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport const removePostComment = async (commentId: number) => {\n  const postComment = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return postComment.json();\n};\n\nexport const addPostComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => {\n  const newComment = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return newComment.json();\n};\n","export const LOAD_POSTS = 'LOAD_POSTS';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const LOAD_POST_DETAILS = 'LOAD_POST_DETAILS';\nexport const LOAD_POST_COMMENTS = 'LOAD_POST_COMMENTS';\n\nexport const LoadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const LoadUsersAction = (payload: User[]) => ({\n  type: LOAD_USERS,\n  payload,\n});\n\nexport const LoadPostDetailsAction = (payload: Post | null) => ({\n  type: LOAD_POST_DETAILS,\n  payload,\n});\n\nexport const LoadPostCommentsAction = (payload: PostComment[]) => ({\n  type: LOAD_POST_COMMENTS,\n  payload,\n});\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getUsersSelector = (state: State) => state.users;\nexport const getPostDetailsSelector = (state: State) => state.postDetails;\nexport const getPostCommentsSelector = (state: State) => state.postComments;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts, getPostComments, getPostDetails } from '../../helpers/api';\nimport { LoadPostCommentsAction, LoadPostDetailsAction, LoadPostsAction } from '../../store/actions';\nimport { getPostsSelector } from '../../store/selectors';\nimport './PostList.scss';\n\nexport const PostList: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const dispatch = useDispatch();\n\n  const posts: Post[] = useSelector(getPostsSelector);\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await fetchPosts();\n\n      dispatch(LoadPostsAction(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, []);\n\n  const handlePostDetails = async (postId: number) => {\n    const postDetails = await getPostDetails(postId);\n    const postComments = await getPostComments(postId);\n\n    dispatch(LoadPostDetailsAction(postDetails));\n    dispatch(LoadPostCommentsAction(postComments));\n\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n      dispatch(LoadPostDetailsAction(null));\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <section className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handlePostDetails(post.id)}\n            >\n              {post.id === selectedPostId ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts, fetchUsers, getUserPosts } from '../../helpers/api';\nimport { LoadPostsAction, LoadUsersAction } from '../../store/actions';\nimport { getUsersSelector } from '../../store/selectors';\n\nexport const UserSelector: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const users: User[] = useSelector(getUsersSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await fetchUsers();\n\n      dispatch(LoadUsersAction(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  const loadUserPosts = async (userId: number) => {\n    const userPosts = await getUserPosts(userId);\n\n    dispatch(LoadPostsAction(userPosts));\n  };\n\n  const loadAllPosts = async () => {\n    const postsFromServer = await fetchPosts();\n\n    dispatch(LoadPostsAction(postsFromServer));\n  };\n\n  const handleUserChange = async (userId: number) => {\n    if (userId === 0) {\n      loadAllPosts();\n    } else {\n      loadUserPosts(userId);\n    }\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label htmlFor=\"user-selector\">\n        Select a user: &nbsp;\n\n        <select\n          id=\"user-selector\"\n          className=\"App__user-selector\"\n          onChange={(event) => handleUserChange(+event.target.value)}\n        >\n          <option value=\"0\">All users</option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addPostComment, getPostComments } from '../../helpers/api';\nimport { LoadPostCommentsAction } from '../../store/actions';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const dispatch = useDispatch();\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const addNewComment = async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n\n    await addPostComment(postId, name, email, body);\n\n    const postComments = await getPostComments(postId);\n\n    dispatch(LoadPostCommentsAction(postComments));\n\n    clearForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={event => addNewComment(event)}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getPostComments, removePostComment } from '../../helpers/api';\nimport { LoadPostCommentsAction } from '../../store/actions';\nimport { getPostCommentsSelector, getPostDetailsSelector } from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [commentsHidden, setCommentsHidden] = useState(true);\n\n  const postDetails: Post | null = useSelector(getPostDetailsSelector);\n  const postComments: PostComment[] = useSelector(getPostCommentsSelector);\n\n  const dispatch = useDispatch();\n\n  const removeComment = async (commentId: number) => {\n    await removePostComment(commentId);\n\n    if (postDetails) {\n      const postCommentsFromServer = await getPostComments(postDetails.id);\n\n      dispatch(LoadPostCommentsAction(postCommentsFromServer));\n    }\n  };\n\n  return (\n    <div className=\"PostDetails\">\n\n      {postDetails\n        && (\n          <>\n            <h2>Post details:</h2>\n            <section className=\"PostDetails__post\">\n              <p>{postDetails.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setCommentsHidden(!commentsHidden)}\n              >\n                {`${commentsHidden ? 'Show' : 'Hide'} ${postComments.length} comments`}\n              </button>\n\n              {!commentsHidden\n                && (\n                  <ul className=\"PostDetails__list\">\n                    {postComments.map(comment => (\n                      <li\n                        key={comment.id}\n                        className=\"PostDetails__list-item\"\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => removeComment(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{`User [${comment.name}] says: ${comment.body}`}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                {postDetails && !commentsHidden && <NewCommentForm postId={postDetails.id} />}\n              </div>\n            </section>\n          </>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { PostList } from './components/PostList';\nimport './styles/general.scss';\nimport './App.scss';\nimport { UserSelector } from './components/UserSelector';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <UserSelector />\n          <PostList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport {\n  LOAD_POSTS,\n  LOAD_POST_COMMENTS,\n  LOAD_POST_DETAILS,\n  LOAD_USERS,\n} from './actions';\n\nconst initialState: State = {\n  posts: [],\n  users: [],\n  postDetails: null,\n  postComments: [],\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    case LOAD_USERS:\n      return {\n        ...state,\n        users: [...action.payload],\n      };\n\n    case LOAD_POST_DETAILS:\n      return {\n        ...state,\n        postDetails: { ...action.payload },\n      };\n\n    case LOAD_POST_COMMENTS:\n      return {\n        ...state,\n        postComments: [...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}