{"version":3,"sources":["helpers/api.ts","store/actions.ts","store/selectors.ts","components/PostList/PostList.tsx","components/UserSelector/UserSelector.tsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","fetchPosts","a","fetch","response","json","fetchUsers","getUserPosts","userId","LOAD_POSTS","LOAD_USERS","LoadPostsAction","payload","type","getPostsSelector","state","posts","getUsersSelector","users","PostList","dispatch","useDispatch","useSelector","useEffect","loadPostsFromServer","postsFromServer","className","map","post","title","id","UserSelector","loadUsersFromServer","usersFromServer","loadUserPosts","userPosts","loadAllPosts","handleUserChange","htmlFor","onChange","event","target","value","user","name","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ce5b488.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function fetchPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n\nexport async function fetchUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n\nexport async function getUserPosts(userId: number) {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  return response.json();\n}\n\nexport function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","export const LOAD_POSTS = 'LOAD_POSTS';\nexport const LOAD_USERS = 'LOAD_USERS';\n\nexport const LoadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const LoadUsersAction = (payload: User[]) => ({\n  type: LOAD_USERS,\n  payload,\n});\n","export const getPostsSelector = (state: State) => state.posts;\nexport const getUsersSelector = (state: State) => state.users;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../../helpers/api';\nimport { LoadPostsAction } from '../../store/actions';\nimport { getPostsSelector } from '../../store/selectors';\nimport './PostList.scss';\n\nexport const PostList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const posts: Post[] = useSelector(getPostsSelector);\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await fetchPosts();\n\n      dispatch(LoadPostsAction(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, []);\n\n  return (\n    <section className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              // onClick={() => handlePostId(post.id)}\n            >\n              open\n              {/* {post.id === selectedPostId ? 'Close' : 'Open'} */}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts, fetchUsers, getUserPosts } from '../../helpers/api';\nimport { LoadPostsAction, LoadUsersAction } from '../../store/actions';\nimport { getUsersSelector } from '../../store/selectors';\n\nexport const UserSelector: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const users: User[] = useSelector(getUsersSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await fetchUsers();\n\n      dispatch(LoadUsersAction(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  const loadUserPosts = async (userId: number) => {\n    const userPosts = await getUserPosts(userId);\n\n    dispatch(LoadPostsAction(userPosts));\n  };\n\n  const loadAllPosts = async () => {\n    const postsFromServer = await fetchPosts();\n\n    dispatch(LoadPostsAction(postsFromServer));\n  };\n\n  const handleUserChange = async (userId: number) => {\n    if (userId === 0) {\n      loadAllPosts();\n    } else {\n      loadUserPosts(userId);\n    }\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label htmlFor=\"user-selector\">\n        Select a user: &nbsp;\n\n        <select\n          id=\"user-selector\"\n          className=\"App__user-selector\"\n          onChange={(event) => handleUserChange(+event.target.value)}\n        >\n          <option value=\"0\">All users</option>\n          {users.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React from 'react';\nimport { PostList } from './components/PostList';\nimport './styles/general.scss';\nimport './App.scss';\nimport { UserSelector } from './components/UserSelector';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <UserSelector />\n          <PostList />\n        </div>\n\n        <div className=\"App__content\">\n          {/* <PostDetails /> */}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { LOAD_POSTS, LOAD_USERS } from './actions';\n\nconst initialState: State = {\n  posts: [],\n  users: [],\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    case LOAD_USERS:\n      return {\n        ...state,\n        users: [...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root: React.FC = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}